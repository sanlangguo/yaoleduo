package com.ldyy.plug;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.ldyy.data.Tree;
import com.ldyy.tool.Config;
import com.ldyy.tool.DBCon;
import com.ldyy.tool.DBCtrl;

public class AppSpl {
	private Logger log = Logger.getLogger(this.getClass());

	public String getNo_(Tree<String> result, String arg) {
		// !可使用新的数据库操作接口
		Connection conn = DBCon.getConnection();
		Statement stmt = null;
		ResultSet rs = null;
		try {
			conn.setAutoCommit(false);
			stmt = conn.createStatement();
			String sql = "select serialNo from `serialno` where ID='" + arg
					+ "' for update";
			rs = stmt.executeQuery(sql);

			rs.next();
			String no = rs.getString("serialNo");
			sql = "update `serialno` set serialNo=serialNo+1 where ID='" + arg
					+ "'";

			if (stmt.executeUpdate(sql) == 0) {
				throw new RuntimeException("更新流水号错误");
			}
			conn.commit();
			return no;
		} catch (Throwable t) {
			log.error("获取流水号时发生异常", t);
			try {
				conn.rollback();
			} catch (Throwable e1) {
				log.error("发生异常后，回滚失败。", e1);
			}
			result.put("ret", "-4");
			result.put("rtmsg", "数据库错误");
			result.put("Sys_closeFlag", "");
			return null;
		} finally {
			DBCtrl.close(rs, stmt);
			DBCon.releaseCon(conn);
		}
	}

	public String concat_(Tree<String> result, String arg) {
		String[] a1 = arg.split("=");
		String[] a2 = a1[1].split("[+]");
		StringBuilder sb = new StringBuilder();
		for (String tmp : a2) {
			if (tmp.startsWith("~"))
				sb.append(result.get(tmp.substring(1)));
			else
				sb.append(tmp);
		}
		result.put(a1[0], sb.toString());
		return null;
	}

	public void check(Tree<String> result, String str, String args) {
		String[] tmp = args.split("/");
		if (!result.get(tmp[0]).equals(result.get(tmp[1]))) {
			result.put("ret", tmp[2]);
			result.put("rtmsg", tmp[3]);
			result.put("Sys_closeFlag", "");
		}
	}

	public void authCode(Tree<String> result, String str) {
		// 限制时间，避免被刷
		result.put("authCode", "654321");
	}

	public void checkUser(Tree<String> result, String str) {
		result.put(result.get("type"), result.get("value"));
		boolean b = DBCtrl.select("Customer", result,
				new String[] { result.get("type") }, new String[] { "ID" });
		if (b) {
			result.put("ret", "1");
			result.put("rtmsg", "用户已存在");
			result.put("Sys_closeFlag", "");
		}
	}

	public void login(Tree<String> result, String str) {
		boolean c = DBCtrl.select("Customer", result,
				new String[] { result.get("type"), "password" }, new String[] {
						"type", "level", "ID", "cellphone", "linkman" });
		String level = result.get("level");

		if (!c) {
			result.put("ret", "1");
			result.put("rtmsg", "用户名或密码错误");
			result.put("Sys_closeFlag", "");
		} else if (level.equals("0")) {
			result.put("ret", "2");
			result.put("rtmsg", "未提交审核资料");
			result.put("Sys_closeFlag", "");
		} else if (level.equals("-1")) {
			result.put("ret", "3");
			result.put("rtmsg", "尚未审核");
			result.put("Sys_closeFlag", "");
		} else if (level.equals("-2")) {
			result.put("ret", "4");
			result.put("rtmsg", "资质审核未通过");
			result.put("Sys_closeFlag", "");
		}
	}

	public void drugList(Tree<String> result, String str) {
		String[] tmp = result.get("search").toUpperCase().split(" {1,}");
		int pageSize = Integer.parseInt(result.get("pageSize"));
		int pageNum = Integer.parseInt(result.get("pageNum"));
		StringBuilder where = new StringBuilder();
		for (String tp : tmp) {
			where.append(" search like '%").append(tp).append("%' and");
		}
		where.delete(where.length() - 4, where.length());
		if (pageNum == 1) {
			DBCtrl.selectOne("drugSearch", result, new String[] {"count(ID)"}, where.toString());
			result.put("size", result.remove("count(ID)"));
		}
			
		Map<String, String> cfg = Config.getM("drugL");
		str = cfg.keySet().toString().trim();
		StringBuilder sb = new StringBuilder();
		sb.append("select ")
				.append(str.substring(1, str.length() - 1))
				.append(" from `drug` where ID in (select ID from `drugSearch` where");
		sb.append(where.toString());
		sb.append(") limit ").append(pageSize * (pageNum - 1)).append(",").append(pageSize);
		List<Tree<String>> drugL = DBCtrl.getSelectList(sb.toString(), "drugList");
		addList(drugL, result, "drugList");
	}
	
	private static void addList(List<Tree<String>> l, Tree<String> father, String name) {
		if (l.size() == 0) {
			Tree<String> t = new Tree<String>(name);
			t.haveSameName = 1;
			father.addBranch(t);
		} else if (l.size() == 1) {
			Tree<String> t = l.get(0);
			t.haveSameName = 1;
			father.addBranch(t);
		} else {
			father.addBranchs(l);
		}
	}
}
